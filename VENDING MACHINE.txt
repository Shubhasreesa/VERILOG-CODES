
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 08.08.2024 11:34:22
// Design Name: 
// Module Name: vending_machine
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module vending_machine(
    input [1:0] coin,
    input wire clk,
    input wire rst,
    output reg z, // Changed to reg type since it is assigned in an always block
    output reg [1:0] change
);

    // State parameters
    parameter sin = 4'b0000, s10 = 4'b0001, s20 = 4'b0010, s30 = 4'b0011, 
              s40 = 4'b0100, s50 = 4'b0101, s60 = 4'b0110, s70 = 4'b0111, 
              s80 = 4'b1000; 

    // Coin parameters
    parameter ten = 2'b00, twenty = 2'b01, fifty = 2'b10;

    reg [3:0] state, next_state;

    // State transition on clock or reset
    always @(posedge clk or posedge rst) begin
        if (rst == 1)
            state <= sin;
        else
            state <= next_state;
    end

    // Next state logic
    always @(state or coin) begin
        case(state)
            sin:
                if (coin == ten)
                    next_state <= s10;
                else if (coin == twenty)
                    next_state <= s20;
                else
                    next_state <= s50;
            s10:
                if (coin == ten)
                    next_state <= s20;
                else if (coin == twenty)
                    next_state <= s30;
                else
                    next_state <= s60;
            s20:
                if (coin == ten)
                    next_state <= s30;
                else if (coin == twenty)
                    next_state <= s40;
                else
                    next_state <= s70;
            s30:
                if (coin == ten)
                    next_state <= s40;
                else if (coin == twenty)
                    next_state <= s50;
                else
                    next_state <= s80;
            s40, s50, s60, s70, s80:
                next_state <= sin;
            default:
                next_state <= sin;
        endcase
    end

    // Output logic
    always @(state) begin
        case (state)
            sin: begin z = 0; change = 0; end
            s10: begin z = 0; change = 0; end
            s20: begin z = 0; change = 0; end
            s30: begin z = 0; change = 0; end
            s40: begin z = 1; change = 0; end
            s50: begin z = 1; change = 1; end 
            s60: begin z = 1; change = 1; end 
            s70: begin z = 1; change = 1; end 
            s80: begin z = 1; change = 1; end
        endcase
    end

endmodule
